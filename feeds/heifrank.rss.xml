<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>新世界</title><link>http://heifrank.github.io/</link><description></description><atom:link href="http://heifrank.github.io/feeds/heifrank.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 07 Oct 2015 00:00:00 +0800</lastBuildDate><item><title>django制作first app(1)</title><link>http://heifrank.github.io/pages/2015/10/07/django_app_1.html</link><description>&lt;p&gt;django中的migrate有三种：
1、makemigrate
2、sqlmigrate
3、migrate&lt;/p&gt;
&lt;p&gt;makemigrate，基于当前的model，根据对models的修改，创建新的迁移文件
sqlmigrate，用于显示迁移的SQL语句
migrate，是真正用于执行迁移操作的命令&lt;/p&gt;
&lt;p&gt;一般用法是修改models之后，以如下命令顺序执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py makemigrate
python manage.py sqlmigrate appname 0001
python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一些简单的查询语句都可以通过对python的对象的操作来实现，比如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Question.objects.filter(id=1)
Question.objects.all()
Question.objects.get(pk=1)

# Question是Choice的外键
q = Question.objects.get(pk=1)
c = q.choice_set.create(choice_text=&amp;#39;abc&amp;#39;, votes=0)
c = q.choice_set.create(choice_text=&amp;#39;def&amp;#39;, votes=0)
q.choice_set.all()

Choice.objects.filter(question__pub_date__year=2015)
c = q.choice_set.filter(choice_text__startswith=&amp;#39;abc&amp;#39;)
c.delete()
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Wed, 07 Oct 2015 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2015-10-07:pages/2015/10/07/django_app_1.html</guid><category>develop</category><category>django</category><category>migrate</category></item><item><title>字符串最小表示</title><link>http://heifrank.github.io/pages/2015/02/19/poj_1509.html</link><description>&lt;h2&gt;字符串最小表示&lt;/h2&gt;
&lt;p&gt;这个是求字符串循环之后的最小串：把字符串先复制一份放到原串末尾，然后对两个串相互比较，这里先比较i=0和j=1这两个串，如果出现了字符不相等的情况，需要选择i和j其中一个改变其值，改多少呢？&lt;/p&gt;
&lt;p&gt;如果a[i+k] &amp;gt; a[j+k]，那么把i变成i+k+1即可，为什么呢？为什么i不可能是i到i+k中的值呢？因为无论i取i到i+k中的任何值（假设为i+m），那么我们都可以找到另一个串a[j+m]比a[i+m]要小（因为a[j+k] &amp;lt; a[i+k]），因此i如果变成i+m的话，其实不是最优的。&lt;/p&gt;
&lt;p&gt;贴下关键部分的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;int go(){
    int i = 0, j = 1, k = 0;
    int sz = strlen(a);
    for(int m = 0; m &amp;lt; sz; m++)
        a[m + sz] = a[m];
    while(i &amp;lt; sz &amp;amp;&amp;amp; j &amp;lt; sz &amp;amp;&amp;amp; k &amp;lt; sz){
        if(a[i + k] == a[j + k])k++;
        else{
            if(a[i + k] &amp;gt; a[j + k]){
                i = i + k + 1;
            }else{
                j = j + k + 1;
            }
            k = 0;
            if(i == j)j = i + 1;
        }
    }
    return min(i, j) + 1;
}
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Thu, 19 Feb 2015 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2015-02-19:pages/2015/02/19/poj_1509.html</guid><category>字符串</category></item><item><title>SRM 208</title><link>http://heifrank.github.io/pages/2014/10/31/srm_208.html</link><description>&lt;p&gt;SRM 208 DIV1 的level 3，题意是给一个张网，每个给子里有一定量的苹果，求然后有三个人从左上角走到右下角，每个人走过一个格子的时候就会把当前格子里的苹果都带走，问三个人能拿到的最多的苹果是多少。&lt;/p&gt;
&lt;p&gt;很显然的一个解法dp，dp[step][i][j][k]，意义是走完step步，第一个人在(i,step-i)，第二个人在(j,step-j)，第三人在(k,step-k)的时候能拿到的最多苹果是多少。&lt;/p&gt;
&lt;p&gt;这题还有另一种解法，是要观察出一个性质，就是三条路径除了第一行和最后一行，路径不会相交，就是说可以理解成从第一行连到最后一行的三条路，路径不相交，相交肯定不是最优的，这个比较容易证明。然后是dp的时候怎么能体现出这个三条路径不相交的性质来。dp[row][i][j][k]为第row行，当前三条路径终点在(row,i)，(row,j)，(row,k)三个点时能拿到的最多苹果，那么此时可以枚举上一行的状态，也即dp[row-1][pi][pj][pk]，然后转移状态，但是这样的复杂度过高，所以只能另寻他法。其实dp[row][i][j][k]可以由当前行的状态转移过来，如dp[row][i-1][j][k]等转移来，意义就是从(row,i-1,j,k)向右走一步过来。但是这里要注意状态转移的顺序，开始我是这么写的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;FOR(i,0,cols)FOR(j,i+1,cols)FOR(k,j+1,cols){
    if(i&amp;gt;0)dp[row][i][j][k] = max(dp[row][i-1][j][k]+apple[row][i], dp[row][i][j][k]);
    ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是这样是完全不对的，因为这样根本没有考虑转移顺序的问题，这样转移出来的路径是有交叉的。正确的应该像这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;FOR(i,0,cols)FOR(j,i+2,cols)FOR(k,j+1,cols)     ...(A)
    dp[row][i][j][k] = max(dp[row][i][j][k], dp[row][i-1][j][k]+apple[row][i]);

FOR(i,0,cols)FOR(j,i+1,cols)FOR(k,j+2,cols)     ...(B)
    ...

FOR(i,0,cols)FOR(j,i+1,cols)FOR(k,j+1,cols-1)   ...(C)
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样转移出来的路径是绝对不会交叉的，原因就是，这样得到的dp[row][i][j][k]是(C)得来的，(C)由(B)得来，(B)由(A)得来，而每个式子得来的时候，都会保证路径是不相交的。所以最后的结果路径是不相交的，简单点说就是让最左边的路往右走一步，对每个(j,k)都处理完的时候，再走中间的路。好好想想...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Fri, 31 Oct 2014 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2014-10-31:pages/2014/10/31/srm_208.html</guid><category>DP</category></item><item><title>DP专辑</title><link>http://heifrank.github.io/pages/2014/04/06/dp.html</link><description>&lt;h3&gt;写一些关于DP的知识&lt;/h3&gt;
&lt;p&gt;1、任何的01背包，都可以把价值V和容量W互换，就是说有两种方法可以解背包，比如将n个物品放入容量为W的背包，问能获得的最大价值。可以转化为，将n个物品放入容量为V（V为所有物品的价值总和）的背包，能获得的最小价值（对应于原问题中的最小重量）是多少。所以，当某个方向的问题不可解时（比如状态太多，或者状态下标要用浮点数表示什么的）就可以将其用另一个方向做，典型的问题是hdu2955抢银行。&lt;/p&gt;
&lt;p&gt;2、有的时候我习惯用dp值为-1代表某个状态不可达，因为有些时候怕如果赋值为正负无穷的话会运算越界，但是如果设置不合法dp值为-1的话，一定要确保正常的dp值不能为-1。&lt;/p&gt;
&lt;p&gt;3、打印解路径。可以用两个一维数组打印（一个数组是dp数组，另一个是决策数组s，s[i]记录dp[j]是怎么转移来的），这个时候需要背包是恰好装满时候的背包，如果是可以不装满的背包，无法用两个一维数组来打印解路径，需要至少用一个二维数组，但是其实任何不装满的背包都可以按照装满背包的方法解，最后再检查一遍所有的合法值就行了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Sun, 06 Apr 2014 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2014-04-06:pages/2014/04/06/dp.html</guid><category>DP</category></item><item><title>eclipse的C++索引index</title><link>http://heifrank.github.io/pages/2014/04/04/eclipse_index.html</link><description>&lt;p&gt;eclipse中经常碰到一些头文件找不到的问题，就是程序能编译通过，但是编辑器上就是显式unresolved include files，这个时候，可以对工程进行配置，右键工程的property，找到C/C++ General，里面有个Paths and Symbols，在include的GNU C和GNU C++中都添加相应的头文件，如果只配置C++，那么以.c为后缀的文件就不能找到相应的头文件了，所以把两个都配上。配置好之后如果还不行，那就右键工程，点index，Rebuild就可以了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Fri, 04 Apr 2014 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2014-04-04:pages/2014/04/04/eclipse_index.html</guid><category>develop</category><category>eclipse</category></item><item><title>看电影</title><link>http://heifrank.github.io/pages/2014/03/30/watching_movie.html</link><description>&lt;h2&gt;从今天起把看过的电影记录一下&lt;/h2&gt;
&lt;h3&gt;1、砰然心动（flipped）&lt;/h3&gt;
&lt;p&gt;感觉这个电影挺好的，以两个人的内心世界同时反映一件事情，看的时候感慨挺多的  &lt;/p&gt;
&lt;p&gt;A、比如开始的部分，女孩在男孩上学的时候大胆地抱住他，男孩想的是这女孩怎么这么烦，我作为一个旁观者也感觉确实是挺头疼的，但是换到了女孩的内心时，她想的确实想让男孩摆脱害羞，这倒着实让我吃了一惊，每个人有自己的表达情感的方式和处理事情的方式，有些可能外表上看起来不大好，但是背后很有可能也是一颗火热的心。  &lt;/p&gt;
&lt;p&gt;B、还有印象比较深的就是，面对一件事情的时候，最好的解决办法可能是直接说出来，不要扭扭捏捏，有些事情上需要委婉，但是有些事情上可能需要坚决果断。  &lt;/p&gt;
&lt;p&gt;C、看到两家一起吃饭的时候感觉挺好的，虽然饭桌上有些讽刺的话，但是感觉这样的生活才是生活，以后要和邻居多多来往，偶尔请来家里一起吃个饭，让孩子一起玩玩还是很不错的。  &lt;/p&gt;
&lt;p&gt;D、同样是饭桌上的感受，关于那个男孩的父亲为什么后来沉默，电影里没点明，但是大概能才出来，可能他年轻的时候比较懦弱，没有继续把事情做下去，其实很多人人生都有缺憾，我现在也慢慢意识到这个问题，我想应该现在想做什么就努力去做，不要到以后后悔。  &lt;/p&gt;
&lt;p&gt;我觉得看电影的很大的好处就是，可以以旁观者的角度思考问题，偶尔可以把自己放到情境里想想如果我是其中的一个角色，我会怎么做，很多时候真的自己也不知道该怎么做，这个时候就会有很多的感受呢！&lt;/p&gt;
&lt;h3&gt;2、不可饶恕（韩国）&lt;/h3&gt;
&lt;p&gt;这个电影我看的时候，明白了一些人可以随便践踏别人生命的原因。&lt;/p&gt;
&lt;h2&gt;未完待续&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Sun, 30 Mar 2014 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2014-03-30:pages/2014/03/30/watching_movie.html</guid><category>movie</category></item><item><title>数据结构汇总</title><link>http://heifrank.github.io/pages/2014/03/29/data_structure.html</link><description>&lt;p&gt;总结一下接触过的常用数据结构（FIFO队列和栈就不说了，SPLAY、Treap、红黑树什么的看情况再写）  &lt;/p&gt;
&lt;p&gt;先说下STL，STL迭代器分为五种，input，output，正向，双向，随机存取。支持后面特性的迭代器一定支持前面的。  &lt;/p&gt;
&lt;p&gt;STL中，vector和deque都支持随机访问；set，map和list都只支持到双向迭代器，不支持随机存取，也就是说不能对这三个的迭代器进行+-运算（但是可以进行++，--运算，因为支持双向迭代）；stack，queue，priority_queue不支持迭代器，它们都是容器适配器。  &lt;/p&gt;
&lt;h3&gt;1、单调队列&lt;/h3&gt;
&lt;p&gt;队列内的元素是单调排列的，和普通队列的区别在于队列尾部可以弹出元素。常用于优化DP什么的，一般可以把复杂度相对高的东西优化不少。&lt;/p&gt;
&lt;h3&gt;2、树状数组&lt;/h3&gt;
&lt;p&gt;问题是：给定一个数组，支持两种操作：A.修改某个元素的值，B.查询某个区间[L,R]的所有元素的和  &lt;/p&gt;
&lt;p&gt;树状数组也叫Fenwick Tree，本质是用数的二进制进行快速计算，设置一个C数组，C[I]表示的是A[I],A[I-1],...,A[I-lowbit(I)+1]的区间的和，也就是I开始的，向前lowbit(I)个数的数字的和。求和的话就在树中往左上爬，更新的话就在树中往右上爬。需要深刻理解的是不重不漏地更新和查询所有值。  &lt;/p&gt;
&lt;p&gt;大概理解就是，查询和的时候，拿n=0101 0110这个数来说，把前n项和分解成了C[0101 0110],C[0101 0100],C[0101 0000],C[0100 0000]这几个数的和，这几个数管辖的区间完全覆盖了[1,n]区间。更新的时候，需要找到所有能管辖到这个数字的C数组中的相应元素加以更新。&lt;/p&gt;
&lt;h3&gt;3、RMQ（Range Minimum Query）&lt;/h3&gt;
&lt;p&gt;问题是：给定一个数组，频繁查询某个区间[L,R]的最小值。  &lt;/p&gt;
&lt;p&gt;一般求解RMQ都用的是ST算法（Sparse Table），是tarjan这位大师搞的，能做到O(NlogN)预处理，O(1)的查询复杂度，ST算法核心是DP，DP[I][J]代表从第i为开始的长度为1&amp;lt;&amp;lt;J的区间的最小值。&lt;/p&gt;
&lt;h3&gt;4、线段树&lt;/h3&gt;
&lt;p&gt;线段树是非常强大的，理解起来也不难，关键是理解透彻，如果理解不透彻的话，写代码会很坑爹。另外说一句，任何树状数组能做的东西，线段树也能做。  &lt;/p&gt;
&lt;p&gt;我理解的线段树的应用就两种，单点更新、查询，成段更新、查询。  &lt;/p&gt;
&lt;p&gt;单点：能解决很多问题，比如从左到右站一排人，每次踢出某个人右边的第k个人，问每次踢出的人的编号。&lt;br /&gt;
成段：这个比较麻烦，主要就是延迟标记的应用，一定要理解好这个延迟标记的作用，提炼出一句话就是：成段更新的时候并不更新到底，而是在路径最后节点上做个标记，在下一次更新或者查询的时候，如果需要继续从该节点向下走的话，把延迟标记传递下去，并且维护好本身节点的值。  &lt;/p&gt;
&lt;p&gt;线段树中，节点本身的属性越多，那么这个线段树就可以做越多的事情。比如一个数组，每次给出一个区间[L,R]，求一个它的子区间[a,b]，使得[a,b]的连续和最大。这个可以用分治的思想解决，手段就是线段树。  &lt;/p&gt;
&lt;p&gt;PS:维护好线段树节点的属性值是相当重要的！&lt;/p&gt;
&lt;h3&gt;5、set、map和hash_map&lt;/h3&gt;
&lt;p&gt;这个是STL里的东西，总结一下是很有用的。  &lt;/p&gt;
&lt;p&gt;set是一个BST，STL中用红黑树实现，根据value值进行排序，有lower_bound 和 upper_bound成员函数，可以方便查询大于等于某个value或者大于某个value的位置。  &lt;/p&gt;
&lt;p&gt;map同样是个BST，STL中用红黑树实现，它的原理是对key值进行排序，所以也是在logn的时间内完成查询和插入操作。  &lt;/p&gt;
&lt;p&gt;hash_map的查询可以做到将近O(1)的复杂度，原理是开大数量的桶，然后对key进行hash，对得到的hash值进行取模，然后放入桶当中，这样查询和更新的时候基本就是O(1)的了（只有出现冲突的时候需要继续找）&lt;/p&gt;
&lt;h2&gt;未完待续&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Sat, 29 Mar 2014 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2014-03-29:pages/2014/03/29/data_structure.html</guid><category>数据结构</category><category>STL迭代器</category></item><item><title>素数筛的复杂度分析</title><link>http://heifrank.github.io/pages/2014/03/28/prime_complex.html</link><description>&lt;p&gt;典型的求素数用的是筛子的方法，最简单的程序是这样的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void getPrime(int n){
    int mk[100005] = {0};
    vector&amp;lt;int&amp;gt; prime;

    for(int i=2; i&amp;lt;=n; i++){
        if(!mk[i])prime.push_back(i);
        for(int j=i+i; j&amp;lt;=n; j+=i)
            mk[j] = 1;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那如果要筛出&amp;lt;=n的质数，大概的复杂度是多少呢？&lt;br /&gt;
其实需要的次数为n x (1 + 1/2 + 1/3 + 1/4 + ... + 1/n)，这个和是发散的，但是这个数小于n x (1 + 1/2 + 1/2 + 1/4 + 1/4 + 1/4 + 1/4 + ...)，也就是小于n x (1 + 1 + 1 + ...)，一共有k个1，其中2的k次方小于等于n。这样看来，其实操作次数并不会太多。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Fri, 28 Mar 2014 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2014-03-28:pages/2014/03/28/prime_complex.html</guid><category>数论</category><category>素数</category></item><item><title>折腾博客</title><link>http://heifrank.github.io/pages/2014/03/26/blog_notice.html</link><description>&lt;p&gt;博客出问题好久了，一直没有注意搞，今天终于好好弄了一遍，记录一些问题。  &lt;/p&gt;
&lt;p&gt;记得在git shell中加入git remote add origin https://github.com/heifrank/heifrank.github.io.git，查看的时候可以用git remote -v来查。之前出的问题是git的submodule相关的，不太了解git具体怎么用，好像说是要用gitmodule这个文件，还有一些命令什么的，没搞清楚，其实说白了就是pelican-themes和pelican-plugins是两个子模块，之前不用指定gitmodule就能用，现在不行了，必须用gitmodule。我于是把主题和插件的位置都换成了本机的绝对路径，就没问题了，具体可以见pelicanconf.py的设置即可。  &lt;/p&gt;
&lt;p&gt;开始配置的时候好像还需要git user什么的&lt;br /&gt;
git config --global user.name "your name"&lt;br /&gt;
git config --global user.email "your email"  &lt;/p&gt;
&lt;p&gt;还有一些命令比如git init也是需要用到的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Wed, 26 Mar 2014 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2014-03-26:pages/2014/03/26/blog_notice.html</guid><category>blog</category></item><item><title>设计模式学习笔记</title><link>http://heifrank.github.io/pages/2014/01/21/design_pattern.html</link><description>&lt;h2&gt;按照最近学习的顺序记录设计模式的一些知识&lt;/h2&gt;
&lt;p&gt;我觉得设计模式要注意的主要方面有几个&lt;br /&gt;
a）面向接口编程！！！&lt;br /&gt;
b）开闭原则！！！（对修改封闭，对扩展开放）&lt;br /&gt;
c）设计模式很相通，有些设计模式非常相似，不需要太纠结细节，只要能设计出合适的类就OK，不用在乎具体是哪个模式  &lt;/p&gt;
&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;所有的设计模式的最终目的都是：让代码结构更加清晰（方便看你代码的人一眼就懂），当发生变动的时候，改动代码的代价最小。站在开发者的角度想，比如你用了个别人开发的库，你想在他开发的这个库基础上进行开发，那么你就得使用这个库，怎么用就是个大问题。&lt;br /&gt;
a）如果你用他的库，却要做一大堆的初始化，还有先后顺序要考虑，那你就很头疼；如果很简单就能用多好&lt;br /&gt;
b）如果你用他的库，却需要修改他的源代码，那就是个痛苦的决定：如果能直接继承或者包含个他的类多好&lt;br /&gt;
c）如果你用他的库，但是他的库中各个模块的耦合度太高，牵一发而动全身，那就是个不良的设计：如果代码清晰耦合度低多棒&lt;/p&gt;
&lt;h3&gt;先做个哈希表&lt;/h3&gt;
&lt;p&gt;单例模式        1&lt;br /&gt;
简单工厂模式  9&lt;br /&gt;
工厂方法模式  10&lt;br /&gt;
抽象工厂模式  11&lt;br /&gt;
原型模式        16
建造者模式       14
适配器模式       12&lt;br /&gt;
桥接模式        18&lt;br /&gt;
组合模式        15
装饰模式        17&lt;br /&gt;
外观模式        4&lt;br /&gt;
享元模式        7&lt;br /&gt;
代理模式        19
职责链模式  &lt;br /&gt;
命令模式  &lt;br /&gt;
解释器模式       13
迭代器模式  &lt;br /&gt;
中介者模式       2&lt;br /&gt;
备忘录模式&lt;br /&gt;
观察者模式       5&lt;br /&gt;
状态模式&lt;br /&gt;
策略模式        8&lt;br /&gt;
模板方法模式  3&lt;br /&gt;
访问者模式   6  &lt;/p&gt;
&lt;p&gt;PS：这里都只是给出模式的一些介绍，和简单应用场景，如果想深入学习，建议找个感兴趣的模式对照书籍好好钻研一下并加以实战&lt;/p&gt;
&lt;h3&gt;1、单例模式&lt;/h3&gt;
&lt;p&gt;如果一个类只能存在一个实例，比如windows任务管理器，或者一个负责分发数据的中心服务器（要保证这个中心服务器的唯一性），这样的情况都需要我们用单例模式来进行设计。&lt;br /&gt;
类的大致结构是这样的  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;{
&lt;span class="n"&gt;private:&lt;/span&gt;
    &lt;span class="n"&gt;Singleton&lt;/span&gt; *&lt;span class="n"&gt;ps&lt;/span&gt;;
    &lt;span class="n"&gt;Singleton&lt;/span&gt;();    
&lt;span class="n"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;* &lt;span class="n"&gt;getInstance&lt;/span&gt;(){
        &lt;span class="k"&gt;if&lt;/span&gt;(&lt;span class="n"&gt;ps&lt;/span&gt; == &lt;span class="n"&gt;NULL&lt;/span&gt;){
            &lt;span class="n"&gt;ps&lt;/span&gt; = &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;();
        }
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt;;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要保证的是构造函数是私有的，就是说类外部不能创建该单例类的实例（需要注意友元）。&lt;/p&gt;
&lt;h3&gt;2、中介者模式&lt;/h3&gt;
&lt;p&gt;协调多个对象之间的交互，常见的例子是界面系统，如果点击其中一个按钮时，会有很多个其他模块的连锁反应。具体举个例子：abcd四个模块，每个模块变化时，另外3个模块跟着变化，这样就要在每个模块中调用其他模块的代码，各个模块之间的耦合度非常之高，并且任何一部分代码不方便重用，这个时候可以考虑使用中介者模式。&lt;br /&gt;
中介者模式就是用一个中介统一管理协调各个对象的交互。&lt;/p&gt;
&lt;h3&gt;3、模板方法模式&lt;/h3&gt;
&lt;p&gt;不变流程封装到父类中，可变实现放到子类中。常见例子是去饭店吃饭，大概流程都是点餐，吃饭，买单，这个流程固定，但是吃饭这个环节可变，其他点餐和买单环节固定。可以实现一个抽象类，类中实现这个基本流程，并提供不可变环节（买单，点餐）的具体实现，然后吃饭环节由不同子类实现。比较实用&lt;/p&gt;
&lt;h3&gt;4、外观模式&lt;/h3&gt;
&lt;p&gt;在多个子系统与用户之间充当一个服务员的角色，感觉和中介者模式以及模板方法模式有类似之处。&lt;/p&gt;
&lt;h3&gt;5、观察者模式&lt;/h3&gt;
&lt;p&gt;这个模式据说是用频率很高，比较像的应用是微博这类的系统，很多个观察者（粉丝）关注一个人，当这个人有新动态的时候，会通知到所有的粉丝。&lt;/p&gt;
&lt;h3&gt;6、访问者模式&lt;/h3&gt;
&lt;p&gt;感觉用处不是很多，先不写了。&lt;/p&gt;
&lt;h3&gt;7、享元模式&lt;/h3&gt;
&lt;p&gt;用处不多，先不写。&lt;/p&gt;
&lt;h3&gt;8、策略模式&lt;/h3&gt;
&lt;p&gt;这个很基本，用处也挺多的，感觉就是里氏替换原则的典型应用，主要有三个类，一个是抽象算法类，还有一个具体算法类，还有一个环境类，用于使用算法类（其实不写环境类也没关系，只是写了之后会更方便客户操作），可以随便选择一个具体算法类，把这个类告诉环境类，然后就能用环境类调用这个算法了。&lt;/p&gt;
&lt;h3&gt;9、简单工厂模式&lt;/h3&gt;
&lt;p&gt;这个模式我觉得挺有用的，算是创建型模式里面的基础模式，客户给出创建的参数，由工厂来做判断创建哪个类型的对象，这个时候需要在工厂类中知道所有的抽象类的子类，并且要加以判断，不过在不是很大的工程里应该很好用。另外如果加了一个子类的话，工厂类必须做出修改，违反开闭原则。&lt;br /&gt;
另外学习到一个知识，就是对象的单一职责原则，一般来说，对象的职责有三种，对象本身的职责，使用对象的职责和创建对象的职责，一般来说三者要分开，创建对象的职责交付给工厂来完成，使用对象的职责交个另外一个类，这样可以使发生变化的时候，改动尽可能地小。&lt;/p&gt;
&lt;h3&gt;10、工厂模式&lt;/h3&gt;
&lt;p&gt;是在简单工厂上的一个扩展，简单工厂模式当要则增加一种新的产品类型的时候，要改工厂的代码，工厂模式就不需要，它把工厂类也做了个抽象化，每个工厂对应一个具体的产品类型，当需要增加新产品类型的时候，只需要新写一个类继承抽象工厂类，再写一个具体的产品类继承抽象产品类就行了。&lt;/p&gt;
&lt;h3&gt;11、抽象工厂模式&lt;/h3&gt;
&lt;p&gt;这个比工厂模式高级的地方就是可以创建一个产品族。需要理解产品等级和产品结构的概念。举个例子来说，电视机和电冰箱是两个产品，美的的电视机和海尔的电视机就是两个产品等级，美的电视机和美的电冰箱就是一个产品族。当我们买个新房子的时候，希望能创建一个产品族，就是直接就能买一个厂商出产的产品，比如美的电视机和美的电冰箱。另外不论是哪种工厂，一次至多创建一个产品结构。 &lt;/p&gt;
&lt;h3&gt;12、适配器模式&lt;/h3&gt;
&lt;p&gt;这个模式我感觉是比较有用的，当我们有个第三方库，然后希望它和我们现有的系统做适配时，可以写一个适配器，这个适配器继承我们现有系统中的某个类，然后关联一个第三方库类，调用我们的类方法时，其实是调用了第三方库方法，这样我们系统中的接口不必做修改，很方便。 &lt;/p&gt;
&lt;h3&gt;13、解释器模式&lt;/h3&gt;
&lt;p&gt;看了一下，学习成本高，应用频率低，就先放过了&lt;/p&gt;
&lt;h3&gt;14、建造者模式&lt;/h3&gt;
&lt;p&gt;这个也先放着，后续再补&lt;/p&gt;
&lt;h3&gt;15、组合模式&lt;/h3&gt;
&lt;p&gt;这个也是比较有用的一个模式，用于树形结构的组织，基本所有树形结构的设计，都可以用这个模式。  &lt;/p&gt;
&lt;h3&gt;16、原型模式&lt;/h3&gt;
&lt;p&gt;一个创建型的模式，用于拷贝本类一个对象。&lt;/p&gt;
&lt;h3&gt;17、装饰者模式&lt;/h3&gt;
&lt;p&gt;少用继承的典范，适用于添加功能之类，应该也有用&lt;/p&gt;
&lt;h3&gt;18、桥接模式&lt;/h3&gt;
&lt;p&gt;处理多维度变化，相对固定的维度设为抽象类，另外变化的维度设置为实现类。&lt;/p&gt;
&lt;h3&gt;19、代理模式&lt;/h3&gt;
&lt;p&gt;一定程度上类似适配器模式&lt;/p&gt;
&lt;p&gt;未完待续&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Tue, 21 Jan 2014 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2014-01-21:pages/2014/01/21/design_pattern.html</guid><category>learning</category><category>design</category></item><item><title>socket基本用法</title><link>http://heifrank.github.io/pages/2013/11/11/socket_basic.html</link><description>&lt;p&gt;写个文章记录一下基本的socket的使用&lt;/p&gt;
&lt;h2&gt;一、面向连接的编程TCP&lt;/h2&gt;
&lt;h4&gt;1、服务器端：&lt;/h4&gt;
&lt;p&gt;首先建立socket&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sockfd = socket(AF_INET, SOCK_STREAM, 0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二个参数说明是面向连接的编程，如果返回-1代表出错，否则返回socket描述符的值；&lt;br /&gt;
然后本机配置一个sockaddr_in类型的地址&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;myaddr.sin_family = AF_INET;  
myaddr.sin_port = htons(SERVER_PORT);  
myaddr.sin_addr.s_addr = INADDR_ANY;//这个值代表自动为这个字段填入本机的IP地址  
memset(&amp;amp;myaddr.sin_zero, 0, sizeof(myaddr.sin_zero));
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来要将socket和配置的地址绑定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bind(sockfd, (struct sockaddr *)&amp;amp;myaddr, sizeof(struct sockaddr))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果返回值为-1代表出错；&lt;br /&gt;
接下来设置同时接收请求的最大数量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;listen(sockfd, NUM)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NUM代表最大的同时请求的数量，这个函数在tcp连接中才有用。&lt;br /&gt;
之后就一直监听sockfd，用accpet函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;client_fd = accept(sockfd, (struct sockaddr *)&amp;amp;client_addr, &amp;amp;size)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的参数意义是，sockfd代表作为服务的socket，第二个参数是代表向服务端发送请求的客户端的地址信息，第三个是一个指向的内容为sizeof(sockaddr_in)的指针，也就是说需要在调用这个函数之前设置size=sizeof(sockaddr_in)，返回值是一个新的socket描述符，就是说accept函数接收了远方客户端的请求，然后把客户端的地址放在了client_addr里，之后为客户端创建了一个新的socket，以后服务器就可以通过这个client_fd来和客户端收发数据了。&lt;/p&gt;
&lt;h4&gt;2、客户端：&lt;/h4&gt;
&lt;p&gt;客户端不需要bind函数，因为客户端很多情况下不需要知道自己用的是哪个端口和服务器通信；客户端也要建立socket，也要配置sockaddr_in类型的地址，这个地址里存放的是远方服务器的地址信息，然后调用connect来进行和服务器的TCP连接，connect函数会自动为客户端分配可用的端口来和服务器通信&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;int connect(int sockfd, struct sockaddr* server_addr, int addrlen)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中sockfd就是客户端创建的文件描述符，server_addr就是要填写的远端服务器的信息，addrlen一般设置为sizeof(struct sockaddr)&lt;/p&gt;
&lt;h4&gt;3、收发数据：&lt;/h4&gt;
&lt;p&gt;面向连接的收发数据函数为send和recv&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;int send(int sockfd, const void* msg, int len, int flags)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sockfd是用来传输数据的socket描述符，msg是一个指向要发送的数据的指针，len是以字节为单位的要发送的数据的长度，flags一般设置为0
返回值是实际发送的数据的长度，如果这个长度和len不相等的话，需要自己处理一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;int recv(int sockfd, void *buf, int len, unsigned int flags)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sockfd是用来接收数据的socket描述符，buf是用来存放接收数据的缓冲区，len是缓冲区的长度（如果定义buf[SIZE]，那么len就为SIZE）,flags一般也设置为0，recv返回实际接收的字节数，如果返回-1说明接收错误。&lt;/p&gt;
&lt;h2&gt;二、面向无连接的编程UDP&lt;/h2&gt;
&lt;p&gt;大致情况和上面相同，不过有几个函数不需要，一个是connect，一个是accept，还有一个是listen。客户端建立完socket，配置好服务器地址之后，直接调用sendto或者recvfrom函数就可以和服务器交互数据了（相比tcp连接少了connect的过程）。服务器创建完socket，绑定端口之后就也可以调用sendto和recvfrom来和客户端交互数据（相比tcp连接少了listen的过程，同时也少了和connect相对应的accept过程）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;int sendto(int sockfd, const void *msg, int len, unsigned int flags, const struct sockaddr* to, int tolen)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前面四个参数和send的含义一致，to需要填写远端地址，tolen一般设置为sizeof(struct sockaddr)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;int recvfrom(int sockfd, void *buf, int len, unsigned int flags, struct sockaddr* from , socklen_t *fromlen)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前四个参数的含义和recv的一致，调用函数之后，from中写入了数据来源的地址，fromlen是一个指向内容为sizeof(struct sockaddr)的指针，就是说调用函数之前要设置*fromlen = sizeof(struct sockaddr)。&lt;/p&gt;
&lt;h2&gt;三、小小的感受&lt;/h2&gt;
&lt;p&gt;connect和accept的关系和sendto和recvfrom的关系很像，参数设置也很像，如果sendto和recvfrom不收发数据的话，那两者的参数基本就一致了。connect对应sendto，把sendto的第2到第5个参数去掉，含义就和connect一样了；accept对应recvfrom，把recvfrom的第2到第5个参数去掉，含义就和accept一样了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Mon, 11 Nov 2013 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2013-11-11:pages/2013/11/11/socket_basic.html</guid><category>learning</category><category>socket</category></item><item><title>POJ3169和POJ1275的深入思考</title><link>http://heifrank.github.io/pages/2013/10/18/POJ3169_POJ1275.html</link><description>&lt;p&gt;恩，本篇文章再写一点深入的思考。忽然发现我的博客开始走找各种被人忽略的细节的路线了。今天要为大家带来的是差分约束的两个题，并且会为大家说明一下自己做这题时候的思考和网上流传的一些错误，不想让网上抄来抄去的东西误导了大家的思路。OJ数据弱，这个是真的，题目那么多，不能保证每个题测试数据的质量，所以很多错误的程序也能过，导致了大家可能把错误的思路也认为是正确的了。恩，下面开始正文。&lt;/p&gt;
&lt;h3&gt;POJ 3169&lt;/h3&gt;
&lt;p&gt;题意：n头牛站在x轴上，并且x[1]&amp;lt;=x[2]&amp;lt;=...&amp;lt;=x[n]，然后给定了一些喜欢的关系和讨厌的关系，喜欢的关系是（a，b，c）代表牛a和牛b的距离不才能超过c，讨厌的关系也是（a，b，c）代表牛a和牛b的距离至少是c，然后求牛1和牛n的最大距离是多少。如果没有合法的站位，输出-1；如果牛1和牛n可以无穷远，输出-2；否则输出牛1和牛n的最大距离。&lt;/p&gt;
&lt;p&gt;这个题看上去很水的，差分约束的题，按照“最长路求最小值，最短路求最大值”的理论建图就行了。需要注意的一个细节就是，如果同时满足没有合法的站位和牛n牛1可以相距无穷远，那么按照题意应该是输出-1的，但是貌似标程是认为-2的优先级高于-1了，而且OJ数据比较弱，没有这种情况的出现，所以不管你输出-1还是-2都能AC。这种情况下，会导致大家思考的时候忽略了一个细节，就是spfa求负环的时候（如果最开始只是原点入队列的话），那么只能判一个原点可达的负环，原点不可达的负环是判不出来的。那怎么办呢？我做法是两次spfa，一次是判负环（所有点入队列，距离都为0），一次是求最短路（原点入队列，距离为0，其他点距离INF）。后来一直再想一次同时求出最短路和判负环的构图方法，n久没想出来。不过自己想了下，有一种方法，虽然是做两次spfa，但是程序执行时间上和一次spfa是一样的，做法是先做spfa，做完之后把所有标号为INF的点加入到队列中去，然后在上一次做完spfa的基础上再spfa判负环。做完了之后，总感觉不爽，就没有一次构图能解决问题的办法么？&lt;/p&gt;
&lt;p&gt;后来和别人讨论了一下，发现了一种办法。这种办法要利用到最短路径上限的值。假设如果没有负环，最长路径值设为max，那么如果开始的时候将原点距离定为0，其他点距离定义为2*max，并且开始时把所有点入队列（和建立一个虚拟原点是一样的）如果有负环的话会返回负环，如果没有的话，判断d[n]和max的关系，如果d[n]&amp;gt;max，那么认为不可达，否则可达。这个方法很巧妙，需要细细思考一下。&lt;/p&gt;
&lt;p&gt;这题还有值得思考的一个地方就是，为什么是最短路求最大值，最长路求最小值。拿最短路求最大值说，如果建立的是这样的边v&amp;lt;=u+w，那么其实v的值可以更小的，比如v=5满足条件，那么v=4也满足条件，但是最短路求的时候用的是等号，所以求的就是满足条件的所有值中最大的那个。另外最大值和最小值一定要看你定义的原点是谁，如果定义原点是1，那么求n的最大值；如果定义原点为n，那么求1的最小值。&lt;/p&gt;
&lt;h3&gt;POJ 1275&lt;/h3&gt;
&lt;p&gt;题意：24个小时每个小时都要有人值班，告诉你每个小时最少需要值班的人数，然后告诉你每个可以用的员工工作的起始时间，每个员工工作的时间都是8个小时，问至少需要多少个员工能完成工作。&lt;/p&gt;
&lt;p&gt;这题也是差分约束，差分方程很好写&lt;br /&gt;
(1) s[i]-s[i-8]&amp;gt;=R[i]        (8&amp;lt;=i&amp;lt;=24)&lt;br /&gt;
(2) s[i]-s[16+i]&amp;gt;=R[i]-s[24] (1&amp;lt;=i&amp;lt;=7)&lt;br /&gt;
(3) s[i]-s[i-1]&amp;gt;=0           (1&amp;lt;=i&amp;lt;=24)&lt;br /&gt;
(4) s[i-1]-s[i]&amp;gt;=-T[i]       (1&amp;lt;=i&amp;lt;=24)&lt;/p&gt;
&lt;p&gt;关键是第二个方程，有三个未知数，这时可以枚举s[24]=sum，然后建立新的方程组&lt;br /&gt;
(1) s[i]-s[i-8]&amp;gt;=R[i]        (8&amp;lt;=i&amp;lt;=24)&lt;br /&gt;
(2') s[i]-s[16+i]&amp;gt;=R[i]-sum   (1&amp;lt;=i&amp;lt;=7)&lt;br /&gt;
(3) s[i]-s[i-1]&amp;gt;=0           (1&amp;lt;=i&amp;lt;=24)&lt;br /&gt;
(4) s[i-1]-s[i]&amp;gt;=-T[i]       (1&amp;lt;=i&amp;lt;=24)&lt;br /&gt;
(5) s[24]-s[0]&amp;gt;=sum&lt;/p&gt;
&lt;p&gt;相信做这个题的人看了网上的解释都知道要加（5）的原因，说是如果求出的s[24]小于sum，那么原来的方程（2）就不一定满足了，所以要加（5）这个方程来限制；并且如果求出的值s[24]&amp;gt;sum的话，那么把s[24]减小为sum一定是一个原方程的解，并且，结尾不需要判断s[24]==sum。这段话在discuss和网上的好多博客中都有说明。好了，重头戏来了，不需要判s[24]==sum么？&lt;/p&gt;
&lt;p&gt;需要！！！OJ数据弱，所以不判也能过。问大家一句，为什么只看方程（2），如果你求出的s[24]大于sum，那方程（1）满足么？如果求出s[24]=sum+10，那么把s[24]减小为sum的话（1）方程就不一定满足了。举个更简单的例子来说&lt;br /&gt;
有三个差分个方程&lt;br /&gt;
x&amp;gt;=17&lt;br /&gt;
y&amp;gt;=x&lt;br /&gt;
y&amp;gt;=16&lt;br /&gt;
如果你枚举了x=14，然后又加了一个方程x&amp;gt;=14，那么这种情况会得到x&amp;gt;=17，y&amp;gt;=16。是不矛盾的，图中没有负环，但是x=14是方程的合法解吗？显然不是，因为还有x&amp;gt;=17这个条件没有满足。如果还是不理解，那么就自己造一组数据，只有23~24点需要17个人工作，并且一共5个人可用，每个人起始工作时间都是23点，看看如果不判s[24]==sum会输出什么吧。&lt;/p&gt;
&lt;p&gt;PS：我最开始做这个题枚举sum的时候，建立了一个环，s[24]&amp;gt;=sum和s[24]&amp;lt;=sum。&lt;/p&gt;
&lt;p&gt;差分约束关键只是在于建图，剩下的就是求最短路或者最长路，spfa比较合适，反正不能用dijkstra就是了，因为一般差分约束的题中都有负权边。这里不贴代码了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Fri, 18 Oct 2013 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2013-10-18:pages/2013/10/18/POJ3169_POJ1275.html</guid><category>图论</category><category>最短路</category><category>差分约束</category></item><item><title>最短路算法详解</title><link>http://heifrank.github.io/pages/2013/10/15/shortest_path.html</link><description>&lt;p&gt;写个博客记录一下最短路的几种算法，尽量做最正确的解答，减少大家的疑惑，网上有好多讲的都抄来抄去，还有好多讲的都是错误的。。。&lt;/p&gt;
&lt;p&gt;熟悉的最短路算法就几种：bellman-ford，dijkstra，spfa，floyd，下面针对这几个算法具体解析一下。
首先说明一点，就是关于负环的问题。&lt;br /&gt;
bellman-ford可以用于边权为负的图中，图里有负环也可以，如果有负环，算法会检测出负环。&lt;br /&gt;
dijkstra只能用于边权都为正的图中。&lt;br /&gt;
spfa是个bellman-ford的优化算法，本质是bellman-ford，所以适用性和bellman-ford一样。&lt;br /&gt;
floyd可以用于有负权的图中，即使有负环，算法也可以检测出来。&lt;/p&gt;
&lt;p&gt;任何题目中都要注意的有四点事项：图是有向图还是无向图、是否有负权边，是否有重边，顶点到自身的可达性。这几点非常重要，可以在我下面的讲解中体会。&lt;/p&gt;
&lt;h3&gt;1、dijkstra&lt;/h3&gt;
&lt;p&gt;这个最简单，只能在边权都为正的图中用这个算法，不论是有向图还是无向图。算法是个贪心的过程，每次拿出一个没有被标记过的距离最小的顶点，并从这个点进行扩展，也就是尝试松弛从这个点出发的每条边。为什么一定要用在正权图中呢？因为算法的过程相当于把整个图中的点一个一个加入到“处理完”集合S的过程，并且处理完集合中的点的距离一定是从源点到该点的最小距离。如果图中有负权，会导致一个进入集合中的点可能在后面的过程中距离值变得更小，算法就错了。举个例子来说：有向图&lt;br /&gt;
1 2 2&lt;br /&gt;
1 3 3&lt;br /&gt;
3 2 -2&lt;br /&gt;
求点1到其他各个节点的最短路。&lt;br /&gt;
根据dijkstra算法，首先会把节点1放入到集合S中，然后更新节点2和3的值，距离分别为d[2]=2，d[3]=3；之后因为节点2的d值比节点3的小，所以把节点2加入到S集合，然后尝试松弛从节点2出发的边，发现没有可以更新的，算法继续；最后拿出节点3，但是此时有一条3到2的权值为-2的边，这样导致了节点2的距离值更小了，算法所维护的集合S的特性被破坏了，算法也就不正确了。所以dijkstra绝对不能用于有负权的图。&lt;/p&gt;
&lt;h3&gt;2、bellman-ford&lt;/h3&gt;
&lt;p&gt;这个要讲很多，里面也有我最纠结的思考。&lt;br /&gt;
首先说下算法的用途，有向图边权可正可负，求源点到每个点最小距离。算法就是执行了n-1次对所有边的松弛而已。算法基于这样的事实，如果存在最短路，那么最短路中一定没有环。如果有0环，那么把这个0环去掉不影响结果；如果是正权环，那么去掉这个环路径长度更小；如果是负权环，那么最短路径不存在，因为可以走无数次这个环，路径长度会无穷小。为什么执行n-1次循环就可以了，这个证明要看算法导论，这里我简单写一下：&lt;br /&gt;
设G=（V，E）是一个源点为s的有向图，权函数为w，假设G中不包含从源点可达的负权回路，那么算法结束时（执行完n-1轮松弛操作），对任意节点v有d[v]=δ(s, v)&lt;br /&gt;
证明：对任意s可达的点v，总能找到一条最短路径p=(v0, v1, ..., vk)，其中v0=s，vk=v。因为最短路径都是简单路径，那么p至多包含n-1条边，所以k&amp;lt;=n-1。由于v0=s，所以d[s]=δ(s,s)=0，当对所有的边进行第一次松弛后，一定有d[v1]=δ(s,v1)。以此类推，对所有的边进行第k次松弛后，有d[vk]=δ(s,vk)。因此当对所有边进行n-1次松弛之后，必有d[v]=d[vk]=δ(s,vk)=δ(s,v)。然后我们证明为什么当d[v(i-1)]=δ(s,v(i-1))时，对边(v(i-1), vi)松弛之后有d[v(i)]=δ(s,v(i))。由于s-&amp;gt;v1-&amp;gt;...-&amp;gt;vi是一条最短路径，在对边(v(i-1),vi)松弛之后一定有d[vi]&amp;lt;=d[v(i-1)]+w(v(i-1),vi)=δ(s,v(i-1))+w(v(i-1),vi)=δ(s,vi)，又由于d[vi]&amp;gt;=δ(s,vi)(这个数组d的性质)，所以d[vi]=δ(s,vi)。这个是比较严谨的证明。  网上有这样的描述性证明：算法可以看成个动态规划的过程，也即最多经过k条边的最短路可以由最多经过k-1条边的最短路再添一条边获得。具体来说就是，第一轮松弛代表从s经过最多一条边的可以到达的所有点的最短距离，第二轮松弛代表从s经过最多两条边可以到达的所有点的最短距离，后续略。这样的说法对不对？对！是可以这样子想，但是d数组的意义却不是这样。比如第一轮松弛之后数组d中的值可不是源点可达的经过最多一条边的最短距离，可能包括了经过多条边的最短距离。这是因为我们一直是对d数组进行操作的，在一轮的松弛中，我们用到了本轮之前的松弛操作得到的结果。所以要切记，第k轮操作之后结束的时候，d数组中存储的值并不是最多经过k条边的最短路！！！那么怎么用这个动态规划的思想呢？很简单，只要用两个数组存储记录就行了。虽然按照网上的这种说法，d数组的意义并不正确，但是最终得到正确的结果是没有问题的。&lt;/p&gt;
&lt;p&gt;另外容易忽视的一个点是，算法会求出从源点可达的负权环，如果一个负权环从源点不可达，那么算法是求不出来的，不过可以用一个非常小的技巧达到这一点，建立一个超级源点向原图中的每个顶点建立一条边，边权值任意，那么从这个超级源点到原图中的任意点都可达了，就能处理所有的负权环了。&lt;/p&gt;
&lt;p&gt;有一个非常纠结的点是，算法隐含了一个条件，一条有向边可以用无数次。这个可能是非常容易忽略的地方，虽然很少有题目会涉及到，但是还是值得思考一下。像我在上面讲的，如果存在一个负权环，那么最短路径不存在，这就隐含了一条边可以走无数次，那如果一条边只能走一次呢？这种情况下所有的最短路算法都不能用了，但是图中任意点的最短路都会存在，怎么求有待思考，我是不会做。。。我猜这个问题是NPC的。此外，求解有向图最短路径是P的，最短简单路径和最长简单路径都是NPC的（简单路径指顶点不能重复走）。如果一个有向图没有负环（可以有负权边），那么这个图的最短简单路径是P的；同理，如果一个有向图没有正环，那么这个图的最长简单路径也是P的。&lt;/p&gt;
&lt;p&gt;然后说我最纠结的地方，无向图的最短路怎么求。网上都这样说，无向边拆成正反两条边就行了，其实不是这样的，要看具体的情况。比如给你个无向图，让你求最短路，那你要注意这个图中是否有负权边，如果没有的话，无向边拆成正反两条边是没问题的，但是如果有负权边并且规定一条无向路只能走一次，那拆边就错了，因为拆边之后会认为图中存在负环，最短路不存在，但是依照题意，最短路一定是存在的（枚举所有路径即可），这个问题和上面的有向图的有向边最多只能用一次的最短路问题是同一类问题，目测也是NPC的。很多图论的问题、以及带限制条件的最短路问题都是NPC的。&lt;/p&gt;
&lt;p&gt;以下这段话不是针对最短路说的，是针对无向图说的。无向图中只要有负权边，那么一定要从题意角度出发思考问题，没有固定的算法可用。比如两个点一条负权边组成的图算不算含负圈？有些题算，因为这样的定义可以使用很多现有的算法，有些题不算，因为直观上想，只有一条边怎么能算有圈？还有一些题对圈的特性做了一些限制，比如求的是简单圈等等。无向图中的trick有很多（考虑重边，圈，顶点能否重用等等），列举不完，做题目的时候要特别留心注意。&lt;/p&gt;
&lt;h3&gt;3、spfa&lt;/h3&gt;
&lt;p&gt;spfa就是个bellman-ford的优化，算法本质和bellman-ford是一样的，具体不多说。有个应用就是可以判负环，当一个点进入队列大于等于n次的时候，就可以认为图中存在负环了，当然spfa能做的bellman-ford都能做，bellman-ford也可以判负环。&lt;/p&gt;
&lt;h3&gt;4、floyd&lt;/h3&gt;
&lt;p&gt;floyd算法是非常强大的，可以处理不少问题，复杂度是O（n^3）的，下面解析一下这个算法&lt;br /&gt;
不少人可能刚接触floyd的时候非常容易把它写错，错误的写法就是三层循环的从外到内的变量分别为i，j，k，正确的写法应该是k，i，j。写错的原因是不理解floyd算法造成的，那么为什么从顺序是k，i，j呢？&lt;/p&gt;
&lt;p&gt;其实floyd的算法本质是个动态规划！dp[k][i][j]代表i到j的中间节点（不包括i和j）都在区间[1，k]时，i到j的最短路。算法的最外层循环是个从小到大枚举k的过程，当最外层刚刚进入第k次循环的时候，我们已经得到了所有点对的dp[k-1][][]的值，也就是所有点对（i，j）的i到j的中间节点都在[1，k-1]区间的i到j的最短路。那么对任意的点对（i，j），如果他俩的最短路经过k点，则dp[k][i][j]=dp[k-1][i][k]+dp[k-1][k][j]；如果不经过k点，则dp[k][i][j]=dp[k-1][i][j]。所以当我们求dp[k][][]的时候，要保证所有的dp[i-1][][]都求出来了，因此，最外层循环是k。&lt;/p&gt;
&lt;p&gt;floyd能做很多事情，下面简单说两个，求有向图的最小环或者最大环（顶点数&amp;gt;=2），求无向图的最小环（顶点数&amp;gt;=3）。&lt;br /&gt;
先说求有向图最小环（最大环略）。有两种方法可以求，一种是设定g[i][i]为无穷大，这样最后找所有的g[i][i]里的最小值就行；另一种是正常做floyd，然后对每个点对（i，j），求g[i][j]+dp[n][j][i]的最小值，这样的原理是最小环如果存在的话，那么可以枚举一个这个环里的边i-&amp;gt;j，那么包含这条边的最小的环一定是i-&amp;gt;j和dp[n][j][i]构成的最短路。&lt;/p&gt;
&lt;p&gt;无向图的最小环做法和有向图不一样，是因为无向边可能会被用两次导致出错，举例说就是：枚举了一条边i-&amp;gt;j，然后其与dp[n][j][i]的和作为一个结果，但是如果j到i的最短路就是边j-&amp;gt;i的话，那么我们找的环其实只是一条边而已，这样的结果显然是错误的。正确的做法是先判断最小环再更新最短路，具体地，参见我的另一篇博客POJ 1734。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2013-10-15:pages/2013/10/15/shortest_path.html</guid><category>图论</category><category>最短路</category></item><item><title>韩国电影推荐</title><link>http://heifrank.github.io/pages/2013/10/13/korea_movie.html</link><description>&lt;p&gt;偶是个韩国电影爱好者，不能说是电影迷吧，对电影没有那么强烈的热爱，只是喜欢而已，而且本人也不是追星族。在这里只是列出一些我印象中比较深刻的一些韩国电影，然后做一些极简短的介绍。&lt;/p&gt;
&lt;p&gt;首先声明，本人男，喜欢看一些引人深思的韩国电影，喜欢有一点暴力但不是特别血腥的电影。情感片我一般不会主动找这些影片看，但是如果碰到了还是会看一下，韩国电影表达感情很细腻，能触碰到内心深处最柔软的部分，我觉得看电影可以提高情商的，对做人处事了解世界有不少增益。以下我列出的韩国电影我强烈推荐的我都觉得非常值得看，看完之后会有很多体会和感悟，是值得细细品味的电影。每个电影的介绍比较简短，以防一些不喜欢剧透的朋友失去观看的兴趣。&lt;/p&gt;
&lt;h3&gt;1、《舞后》&lt;/h3&gt;
&lt;p&gt;这个电影非常好看啊，主角是黄政民和严正花，在剧中两人是真名出演，讲述关于亲情和梦想的故事，在我心里评分100，强烈推荐的电影。&lt;/p&gt;
&lt;h3&gt;2、《大叔》&lt;/h3&gt;
&lt;p&gt;主角叫元斌，是个帅气的小伙，在剧中被叫成大叔，电影讲述他为了救一个邻家女孩发生的一系列故事，主角的身手太帅气了，简单暴力，是我喜欢的类型，强烈推荐。&lt;/p&gt;
&lt;h3&gt;3、《假如爱有天意》&lt;/h3&gt;
&lt;p&gt;这个是我很早看的一个电影，非常感人，记得女主很漂亮，影片表达的唯美的爱情，记得我看完这个电影之后很久一段时间都不能听这个电影的主题曲，一听就会想起剧中的情节，在我心里评分100，强烈推荐。&lt;/p&gt;
&lt;h3&gt;4、《盲》&lt;/h3&gt;
&lt;p&gt;我给我女朋友看这个电影，让她知道这个世界有的时候是很险恶的，不知道什么时候哪个人就安不好的心眼了，有妹子的同胞们一定要让妹子看看这个电影哈，强烈推荐。&lt;/p&gt;
&lt;h3&gt;5、《七号房的礼物》&lt;/h3&gt;
&lt;p&gt;这个是个催人泪下的电影，讲述亲情的，强烈推荐。&lt;/p&gt;
&lt;h3&gt;6、《超速绯闻》&lt;/h3&gt;
&lt;p&gt;这个是喜剧明星车太贤的电影，非常好看，小男主角太可爱了，非常非常萌，电影很温馨，强烈推荐。&lt;/p&gt;
&lt;h3&gt;7、《开心家族》&lt;/h3&gt;
&lt;p&gt;这个也是车太贤的电影，出人意料的结尾，推荐。&lt;/p&gt;
&lt;h3&gt;8、《看见恶魔》&lt;/h3&gt;
&lt;p&gt;大叔崔岷植的电影，情节很紧凑，记得看的时候，在好多地方都为受害者担心啊，部分镜头过于血腥，看完就想好好保护老婆，推荐。&lt;/p&gt;
&lt;h3&gt;9、《我的小小新娘》&lt;/h3&gt;
&lt;p&gt;挺温馨的一个电影吧，也不错，很喜庆。&lt;/p&gt;
&lt;h3&gt;10、《不可饶恕》&lt;/h3&gt;
&lt;p&gt;大叔薛景求的电影，看的时候有一种感觉，就是社会底层的人，如果没有什么牵挂，不是像我们这样想着学业，想着以后养家，想着在事业上有所成就，孑然一身的人，真的是什么事情都可能做得出来，我现在理解一些人为什么杀人不眨眼了，强烈推荐。&lt;/p&gt;
&lt;h3&gt;11、《老男孩》&lt;/h3&gt;
&lt;p&gt;大叔崔岷植的电影，貌似不是我的菜，不过倒是有不少人喜欢。。。&lt;/p&gt;
&lt;h3&gt;12、《金福南杀人事件始末》&lt;/h3&gt;
&lt;p&gt;这个比较血腥，韩国好多这类的电影，这个我不能说太喜欢吧，总有一些人就是被别人奴役却毫无办法还击，应该有一些人喜欢这类电影，韩国电影深刻就体现在这些类电影上吧，看完会有很多感慨，推荐。&lt;/p&gt;
&lt;h3&gt;13、《雏菊》&lt;/h3&gt;
&lt;p&gt;都忘了什么情节了，给我的印象不太深刻吧，不过好多人推荐。&lt;/p&gt;
&lt;h3&gt;14、《假日》&lt;/h3&gt;
&lt;p&gt;受保护监禁法的人的故事，底层人民的呼声怎么能让高层人听到呢？深刻表现了小人物的无奈，推荐。&lt;/p&gt;
&lt;h3&gt;15、《电影就是电影》&lt;/h3&gt;
&lt;p&gt;黑帮男主是那种冷酷的帅气。&lt;/p&gt;
&lt;h3&gt;16、《我的老婆是大佬》&lt;/h3&gt;
&lt;p&gt;这个没有太多的内涵吧，感受一下韩国的女黑帮大佬呵呵。&lt;/p&gt;
&lt;h3&gt;17、《空房子》&lt;/h3&gt;
&lt;p&gt;基本没有对话，但是很让人感动，强烈推荐。&lt;/p&gt;
&lt;h3&gt;18、《格斗少年菀得》&lt;/h3&gt;
&lt;p&gt;叛逆学生和老师的故事，看着挺舒服的。&lt;/p&gt;
&lt;h3&gt;19、《我的野蛮女友》&lt;/h3&gt;
&lt;p&gt;这女友真是霸气啊，太野蛮了，不过野蛮的女生总会有温柔的一面呵呵，推荐。&lt;/p&gt;
&lt;h3&gt;20、《黄海》&lt;/h3&gt;
&lt;p&gt;金允石大叔的电影，战斗力10000+，感受一下黑社会，有人就是你碰触到他利益或者你对他有威胁人家就会整你，这个社会真的是这样，推荐。&lt;/p&gt;
&lt;h3&gt;21、《朋友》&lt;/h3&gt;
&lt;p&gt;张东健的电影，都说很好，但是给我没有留下特别深的印象。&lt;/p&gt;
&lt;h3&gt;22、《追击者》&lt;/h3&gt;
&lt;p&gt;金允石大叔的电影，没有特别深的印象了，只是记得看完又想好好保护老婆了，想保护妹子的可以多看看这类的影片，推荐（以保护妹子为目的）。&lt;/p&gt;
&lt;h3&gt;23、《共同警备区》&lt;/h3&gt;
&lt;p&gt;不能被发现的兄弟情，喜欢兄弟情的人可以看看。&lt;/p&gt;
&lt;h3&gt;24、《阳光姐妹淘》&lt;/h3&gt;
&lt;p&gt;很好看的电影，姐妹之情，推荐。&lt;/p&gt;
&lt;h3&gt;25、《熔炉》&lt;/h3&gt;
&lt;p&gt;根据真实事件改编的电影，讲述孩子被侵犯的事，揭露人性的深刻电影，推荐。&lt;/p&gt;
&lt;h3&gt;26、《王的男人》&lt;/h3&gt;
&lt;p&gt;有些人爱到极点的电影，但不是我的菜呵呵。&lt;/p&gt;
&lt;h3&gt;27、《杀人回忆》&lt;/h3&gt;
&lt;p&gt;这个评分应该极高，但是我没啥印象了，推荐一下吧，哪天重新看看。&lt;/p&gt;
&lt;h3&gt;28、《新世界》&lt;/h3&gt;
&lt;p&gt;里面开头的曲子我特别特别喜欢，真的有一种新世界要出现的感觉，所以我的博客也叫新世界了，故事是讲述黑帮的，推荐。&lt;/p&gt;
&lt;h3&gt;29、《海云台》&lt;/h3&gt;
&lt;p&gt;灾难片，我觉得看灾难片我的感受就是要珍惜生命，珍爱家人，多看这类的电影能强化这个样的感受吧，具体情节记不大清了。&lt;/p&gt;
&lt;h3&gt;30、《铁线虫入侵》&lt;/h3&gt;
&lt;p&gt;灾难电影，可以看看。&lt;/p&gt;
&lt;h3&gt;31、《夺宝联盟》&lt;/h3&gt;
&lt;p&gt;绝对大牌云集，冲着大牌也要看一下吧，推荐。&lt;/p&gt;
&lt;h3&gt;32、《狼族少年》&lt;/h3&gt;
&lt;p&gt;评分很高，都说特别感动人，但没有特别感动我。&lt;/p&gt;
&lt;h3&gt;33、《监视着们》&lt;/h3&gt;
&lt;p&gt;薛景求、郑雨盛、韩孝珠主演，三个人我都很喜欢，另外绝对韩孝珠在剧中的形象很不错呵呵，推荐。&lt;/p&gt;
&lt;h3&gt;34、《我妻子的一切》&lt;/h3&gt;
&lt;p&gt;这个电影两个主角演得都不错，蛮搞笑，讲述的一些事情发人深思，推荐。&lt;/p&gt;
&lt;h3&gt;35、《摩天楼》&lt;/h3&gt;
&lt;p&gt;灾难电影，继续爱老婆，爱家人。最近北京有个地方着火，两个消防员救火没出来，抱着死在了火中，为这两位消防员和像剧中薛景求这类的消防员致敬！要不要在危急的时候做让我们自己敬佩的决定呢？也许只有到了那一刻我们才能决定吧。强烈推荐。&lt;/p&gt;
&lt;h3&gt;36、《传说的拳头》&lt;/h3&gt;
&lt;p&gt;黄政民主演，让我感受到一个好爸爸不是那么容易当的。孩子受欺负了，当父亲的如何处理呢？很难抉择。剧中黄政民的动作倒是还算利索，可以看看。&lt;/p&gt;
&lt;h3&gt;37、《恐怖直播》&lt;/h3&gt;
&lt;p&gt;反映了这个社会的各个层面的现实与无奈，强烈推荐。&lt;/p&gt;
&lt;h3&gt;38、《我的特工女友》（七级公务员）&lt;/h3&gt;
&lt;p&gt;非常不错的搞笑电影，虽然没啥内涵，但是很不错，强烈推荐。&lt;/p&gt;
&lt;h3&gt;39、《甜蜜人生》&lt;/h3&gt;
&lt;p&gt;掺杂黑帮背景，我一般是比较喜欢这类片子的，但是这个片子拍得一般吧，没有太多亮点。&lt;/p&gt;
&lt;h3&gt;40、《流感》（致命感冒）&lt;/h3&gt;
&lt;p&gt;韩国灾难片还是比较不错的，这个也挺好看的，推荐。附上一句，男主叫张赫，长得也太像郑雨盛了吧。。。&lt;/p&gt;
&lt;h3&gt;41、《七天》&lt;/h3&gt;
&lt;p&gt;不错的电影，结局有点意外，强烈推荐，但是感觉电影前半段稍微有点拖沓，不够紧凑。&lt;/p&gt;
&lt;h3&gt;42、《奇怪的她》&lt;/h3&gt;
&lt;p&gt;非常不错的电影，很搞笑，强烈推荐。&lt;/p&gt;
&lt;h3&gt;43、《抓住那个家伙》&lt;/h3&gt;
&lt;p&gt;女主是严正花，我最喜爱的《舞后》的女主，剧情很不错，相当好看，韩国的编剧太牛了，强烈推荐。&lt;/p&gt;
&lt;h3&gt;44、《计划男》&lt;/h3&gt;
&lt;p&gt;喜剧电影，还不错，推荐。&lt;/p&gt;
&lt;h3&gt;45、《率性而活》&lt;/h3&gt;
&lt;p&gt;灰常好看的喜剧电影，相当给力，强烈推荐。&lt;/p&gt;
&lt;p&gt;这篇博客会一直更新下去，想起来的再加进去。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Sun, 13 Oct 2013 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2013-10-13:pages/2013/10/13/korea_movie.html</guid><category>movie</category></item><item><title>POJ 3613</title><link>http://heifrank.github.io/pages/2013/10/11/POJ_3613.html</link><description>&lt;p&gt;题意：一个无向图，求从一个顶点到另一个顶点的恰好经过k条边的最短路径，可能有自环，无重边。&lt;/p&gt;
&lt;p&gt;分析：这个题其实就是矩阵乘法，用了dp的思想，dp[k][i][j]代表恰好经过k条边的i到j的最短路，那么dp[k][i][j]=min{dp[k-1][i][p]+g[p][j]}（其中g是原图）。可以用矩阵乘法来做，因为对于dp[k-1][i][j]来说，只要乘以一次原图矩阵，就相当于做了一次转移，得到的就是dp[k][][]矩阵。我想说这个题除了状态设计和floyd稍微沾了一点边之外，其他一点关系都没有了，竟然看到网上好多人用写floyd的循环顺序来写这个题，真是令人费解，这个题只是改了矩阵乘法的最内层，改变了矩阵乘法的运算规则，和floyd真的没关系啊！！！&lt;/p&gt;
&lt;p&gt;另外，矩阵乘法的规则和在图中求一个点到另一个点的恰好经过k条边的方法数的规则是一样的，二者的状态转移方程也是一样的，所以矩阵乘法不需要经过任何修改就能做这种求恰好经过k条边的方法数的题，而不用像这个题还得做些修改。这些题都需要注意初始化的东西，尤其是g[i][i]，就是定义一个点到本身的权值，本题需要定义为INF，因为如果题目不给自环边的话，那么本身到本身应该认为是不可达的，距离是无穷大的，千万不能定义为0；而求恰好经过k条边的方法数的题的话，应该初始化为0，因为该点到本身应该是有0种方法恰好经过一条边到达（如果没有自环，原图看做是恰好经过一条边从i到j的方法数）。一旦设置好了初始矩阵，神马存在自环啊或者其它环啊之类的问题都不需要我们考虑了，矩阵乘法都帮我们搞定。&lt;/p&gt;
&lt;p&gt;这个题我还学到了个东西，就是求矩阵a的b次幂的刚刚进入函数部分的写法，我以前的写法都是把ans设置为单位矩阵，然后再进入循环做快速幂。今天突然看到有个人的代码，猛地反应过来可以直接设置ans等于传入的矩阵a，然后把幂次减一直接进入循环啊，不需要写设置单位矩阵部分的代码了，以前咋没怎么想呢。。。二了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    POJ 3613&lt;/span&gt;
&lt;span class="cm"&gt;    code by heifrank&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;205&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7fffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;    
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d%d%d%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d%d%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ed&lt;/span&gt;&lt;span class="p"&gt;]]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Fri, 11 Oct 2013 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2013-10-11:pages/2013/10/11/POJ_3613.html</guid><category>图论</category><category>最短路</category><category>Poj</category><category>矩阵乘法</category></item><item><title>windows下用eclipse开发C++</title><link>http://heifrank.github.io/pages/2013/10/10/eclipse_cplusplus_windows.html</link><description>&lt;p&gt;eclipse + cdt + mingw的一些配置
下载标准版本的eclipse（我用的是4.3.0版本的，也叫kepler），下载对应版本的CDT(8.2.0)，安装mingw，我是用mingw-get-inst-20120426.exe装的（这个版本我用的比较舒服，如果在官网上下载mingw的话，安装完可能缺少libiconv2，它是个windows运行的dll库，一般电脑上貌似没有这个库，如果没有它的话不能执行make命令），选装gcc和g++两个组件，如果按照默认路径（C:\MinGW）装可能会碰到少一点的问题。&lt;/p&gt;
&lt;p&gt;cdt有两种下载方式，可以在eclipse的help中通过install安装，也可以在网上下载，然后把下载完的压缩包解压，把里面的features文件夹和plugins文件夹复制到eclipse的根目录中，和eclipse的根目录中的features、plugins文件夹合并就行。&lt;/p&gt;
&lt;p&gt;1、头文件unresolved问题&lt;br /&gt;
这个可以通过在环境变量中设置PATH=MinGW\bin来解决，如果设置了这个path的话，那么eclipse会自动找mingw的一些头文件库，加入到工程中的include文件夹下面（刚创建工程的时候只有一个src目录，没有include目录）。不幸的是，有的时候可能不起作用，我的就是加入了变量，但是不管用，后来把变量删了，又重新加入了一次才管用，很奇怪。&lt;/p&gt;
&lt;p&gt;如果真的加了变量，再删除，再加入变量还是不可以找到头文件目录的话，可以用下面的方法：&lt;br /&gt;
在具体的工程中，加入依赖的库文件：&lt;br /&gt;
MinGW/include&lt;br /&gt;
MinGW/lib/gcc/mingw32/4.6.2/include&lt;br /&gt;
MinGW/lib/gcc/mingw32/4.6.2/include/c++&lt;br /&gt;
MinGW/lib/gcc/mingw32/4.6.2/include/c++/backward&lt;br /&gt;
MinGW/lib/gcc/mingw32/4.6.2/include/c++/mingw32&lt;br /&gt;
MinGW/lib/gcc/mingw32/4.6.2/include-fixed&lt;br /&gt;
在一个工程中导入这些配置后，可以export这个配置到一个xml中，这样方便以后写其他工程。&lt;/p&gt;
&lt;p&gt;另外还有一个解决办法就是在环境变量中添加这些值，需要的有&lt;br /&gt;
PATH=MinGW\bin（这个确定可以找到一些gcc.exe，make.exe等二进制文件，但是不确定能否找到相关的头文件库）&lt;br /&gt;
C_INCLUDE_PATH对应第一个路径&lt;br /&gt;
CPLUS_INCLUDE_PATH对应第二到第六个路径（第二个路径和第六个路径我不知道该归为哪里）&lt;br /&gt;
LIBRARY_PATH的=MinGW\lib（貌似不设置也可以）  &lt;/p&gt;
&lt;p&gt;2、cannot run program "g++"&lt;br /&gt;
这个是下载了cdt之后，装好mingw出现的问题，在命令行中我们直接gcc什么的都没问题，说明环境变量中有mingw的相关路径，但是eclipse中没有，解决办法是在eclipse安装包里的plugins目录下，有个叫org.eclipse.cdt.core.win32.x86_5.2.0.201306112328.jar的压缩包，解压这个压缩包，然后把这个jar删除掉，就可以了。注意解压的不是org.eclipse.cdt.core.win32_5.3.0.201306112328.jar!!!&lt;/p&gt;
&lt;p&gt;3、build正常，可以生成.exe，但是一执行就显示terminated xxx.exe [C/C++ Application]&lt;br /&gt;
这个有两个解决办法，一个是在你创建的工程中配置linker，在linker-flags中写入-static-libgcc -static-libstdc++&lt;br /&gt;
还有一个解决办法就是在run configurations里配置你要运行的.exe的environment，加入一组键值对path-&amp;gt;mingw\bin&lt;br /&gt;
有些人可能在那个window的preferences里面设置environment，但是这个设置有时候好使有时候不好使，坑爹。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Thu, 10 Oct 2013 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2013-10-10:pages/2013/10/10/eclipse_cplusplus_windows.html</guid><category>develop</category><category>eclipse</category></item><item><title>POJ 1734</title><link>http://heifrank.github.io/pages/2013/10/08/POJ_1734.html</link><description>&lt;p&gt;题意：一个无向图，所有边权为正，求这个无向图中的一个权值最小的环（环的权值定义为环中所有边权值的和）。要求环的顶点数至少为3个，且图中可能存在重边。&lt;/p&gt;
&lt;p&gt;分析：这个题我最开始只有搜索的想法，后来看到了floyd的做法，才折服了，向强大的floyd致敬！
这个题可以这么想，抛开floyd的思路，我们知道每个环中都有一个顶点标号最大的顶点（比如为k）。我们可以枚举这个顶点，枚举完这个顶点之后我们再枚举另外两个和它相邻的顶点i和j（i，j &amp;lt; k）。如果这个时候我们知道i到j的不经过k的最短路（设为p），那么我们就可以把边i-&amp;gt;k，k-&amp;gt;j和路径p组合起来，成为一个环，如果这个环的权值小于当前求出的所有环里面的最小权值的话，那么就更新一下最小值，并记录路径。&lt;/p&gt;
&lt;p&gt;恩，这个思路看上去是挺好的，但是我们怎么求i到j的不经过k的最短路呢？想到了什么？floyd！
floyd的本质是个dp，dp[k][i][j]代表i到j的中间节点（不包括i和j）都在区间[1，k]时，i到j的最短路。floyd算法的最外层循环是个从小到大枚举k的过程，当最外层刚刚进入第k次循环的时候，我们已经得到了所有点对的dp[k-1][][]的值，也就是所有点对（i，j）的i到j的中间节点都在[1，k-1]区间的i到j的最短路，如果在这个时候我们顺便设定一下所求环中的顶点编号最大的也为k，那么我们可以根据dp[k-1][][]的值求出一个环，做法就是枚举k的相邻节点i和j（i，j &amp;lt; k）。这个时候dp[k-1][i][j]记录的最短路一定不包含点k，那么i-&amp;gt;k，k-&amp;gt;j和dp[k-1][i][j]就构成了一个环。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    POJ 1734&lt;/span&gt;
&lt;span class="cm"&gt;    code by heifrank&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;G0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d%d%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;G0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;G0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;G0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;G0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;   
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;INF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No solution.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d%c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Tue, 08 Oct 2013 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2013-10-08:pages/2013/10/08/POJ_1734.html</guid><category>Poj</category><category>图论</category><category>最短路</category></item><item><title>POJ 3259</title><link>http://heifrank.github.io/pages/2013/10/07/POJ_3259.html</link><description>&lt;p&gt;题意：一个图，有两种边，一种是双向边，权值为正，一种是单向边，权值为负。&lt;br /&gt;
问能否在图中找到一个负环。&lt;/p&gt;
&lt;p&gt;分析：典型的找负环的题，但是这个题没有规定起点，所以直接从点1开始做bf是错误的。&lt;br /&gt;
bellman-ford算法可以判断一个从源点可达的环，那这个题需要做n次bf吗？&lt;br /&gt;
其实可以建立一个源，从源向每个图中的点引一条任意权值的边（不必为0），然后用bf就行了。&lt;br /&gt;
本质上就是初始化和经典的初始化不同，细节见代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    POJ 3259&lt;/span&gt;
&lt;span class="cm"&gt;    code by heifrank&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;queue&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;505&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MV&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
            &lt;span class="p"&gt;}&lt;/span&gt;   
        &lt;span class="p"&gt;}&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d%d%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d%d%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;       
        &lt;span class="p"&gt;}&lt;/span&gt;    
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d%d%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Mon, 07 Oct 2013 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2013-10-07:pages/2013/10/07/POJ_3259.html</guid><category>图论</category><category>最短路</category><category>Poj</category></item><item><title>新世界</title><link>http://heifrank.github.io/pages/2013/10/05/new_world.html</link><description>&lt;h2&gt;恩，这个是我搭建起这个博客写的第一篇文章&lt;/h2&gt;
&lt;p&gt;希望能一直把这个博客写下去，我老婆也有一篇博客，马上要搭起来了，&lt;br /&gt;
和老婆一起写应该是挺开心的事情吧，&lt;br /&gt;
研究生的日子要好好过，多学点技术，老婆是个技术白痴，&lt;br /&gt;
好多东西得我帮她弄，哎，苦逼技术男，木有办法。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heifrank</dc:creator><pubDate>Sat, 05 Oct 2013 00:00:00 +0800</pubDate><guid>tag:heifrank.github.io,2013-10-05:pages/2013/10/05/new_world.html</guid><category>随笔</category></item></channel></rss>